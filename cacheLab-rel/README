CSE240a Cache Simulator Project
----------------------------------------------------------------------

Caches are pivotal in reducing the performance gap between processors and main
memory. Many applications are memory bound with the memory hierarchy being the
main performance bottleneck.  As you have learned in class, caches leverage the
principles of locality to attempt to reduce the average memory access time.

For this Project you will be implementing a memory hierarchy in a simulated
environment.  We have provided a starting framework to help you
design your memory hierarchy.  The framework (main.c) will perform all of the
command-line switches as well as the reading in of the trace files.  You will
implement the cache simulator by completing all of the TODOs in the cache.c
file.  Note that this is the only file in which you are able to make changes,
as it will be the only file of yours we use for grading.

------------
-- Traces --
------------

Your simulator will model a cache hierarchy based on traces of real programs.
Each line in the trace file contains the address of a memory access in hex as
well as where the access should be directed, either to the I$ (I) or D$ (D).

<Address> <I or D>

Sample Trace from tsman.bz2:
0x648 I
0x64c I
0x650 I
0x654 I
0x658 I
0x40868 D
0x65c I
0x660 I
0x664 I
0x668 I

Will will be providing test traces to you to aid in testing your project but we
strongly suggest that you create your own custom traces to use for debugging.

----------------------------------
-- Running your Cache Simulator --
----------------------------------

In order to build your simulator you simply need to run make in the src/
directory of the project.  You can then run the program on an uncompressed
trace as follows:
  ./cache <options> [<trace>]

If no trace file is provided then the simulator will read in input from STDIN.
Some of the traces we provided are rather large when uncompressed so we have
distributed them compressed with bzip2.  If you want to run the simulator on
a compressed trace then you can do so by doing the following:
  bunzip -kc trace.bz2 | ./cache <options>

In either case the <options> that can be used to change the configurations of
the memory hierarchy are as follows:
  --help                     Print this message
  --icache=sets:assoc:hit    I-cache Parameters
  --dcache=sets:assoc:hit    D-cache Parameters
  --l2cache=sets:assoc:hit   L2-cache Parameters
  --inclusive                Makes L2-cache be inclusive
  --blocksize=size           Block/Line size
  --memspeed=latency         Latency to Main Memory

--------------------------------
-- Implementing the Simulator --
--------------------------------

There are 4 methods which need to be implemented in the cache.c file.
They are: init_cache, icache_access, dcache_access, l2cache_access.

void init_cache();
This will be run before any memory access are provided to your simulator.
This is where you will initialize any data structures or values you need
for your caches.

uint32_t icache_access(uint32_t addr);
uint32_t dcache_access(uint32_t addr);
uint32_t l2cache_access(uint32_t addr);
These 3 functions are the interface to the instruction, data, and l2 caches
respectively.  You will be given an address of a memory access to perform and
expected to return the time it took to perform the access in cycles.  Only
icache_access and dcache_access will be called from main.c, any calls to
l2cache_access will be done by your code if an access is passed up to the
l2 cache on misses in the instruction and data caches.

<-- Configuration -->
  [cache]Sets       // Number of sets in the cache
  [cache]Assoc      // Associativity of the cache
  [cache]HitTime    // Hit Time of the cache in cycles
  blocksize         // The Block or Line size
  inclusive         // Indicates if the L2 is inclusive
  memspeed          // Latency to Main Memory

Each cache can be configured to have a different number of Sets, Associativity
and Hit Time.  Additionally the block size of the memory system can be
configured.  The I$, D$, and L2$ all have the same block size.  The L2 cache
can be configured to be inclusive.  You are also able to set the latency of
main memory.

<-- Inclusion -->

If the L2 is configured to be inclusive, then all valid lines in the D$ and I$
must be present in the L2.  This means if a line is evicted from the L2 then an
invalidation must be sent to both the data cache as well as the instruction
cache.  If the L2 is not inclusive then this restriction doesn't hold and the
D$ and I$ could potentially hold valid lines not present in the L2.  Generally
you should observe worse cache performance when the L2 is configured to be
inclusive.  Why do you think that is?

<-- Uninstantiated Caches -->

If the number of sets of a cache is set to 0 then that cache won't be
instantiated for the simulation.  This means that all accesses which are
directed to it should just be passed through to the next level in the memory
hierarchy.  If a cache is uninstantiated then no statistics need to be
collected for that cache.

<-- Replacement Policy -->

When evicting lines from a cache, in order to free space for a new line, you
should select a victim using the LRU replacement policy.

<-- Statistics -->
  [cache]Refs        // cache references
  [cache]Misses      // cache misses
  [cache]Penalties   // cache penalties

In addition to modeling the memory hierarchy you will be expected to maintain a
number of statistics for each cache in the hierarchy.  These statistics will be
used to calculate the miss rate and average access time for each cache.
Keeping track of references and misses is self explanatory.  The Penalties
statistic will keep track of the total penalty (in cycles) for a simulation.  A
penalty is defined as any extra overhead incurred by accessing the cache beyond
the hit time.  This means that the penalty does not take into account the
latency of an access due to a cache hit.  As an example lets say I have an I$
with a 2 cycle hit latency.  If I have an access which hits in the cache, no
penalty is observed and I will return a 2 cycle access time.  On the other hand
if I have an access which misses the I$ and is passed up to the L2 then the
penalty which the I$ observes is the L2 access time.  For this access I will
return the 2 cycle hit time plus the additional penalty as the I$ access time.
This means that the access time that your cache access functions will return
will be the Hit Time plus any additional penalty observed.

-------------
-- Grading --
-------------

All grading will be done with respect to your Simulator's cache statistics over
a wide variation of input parameters.  This means that you should make sure
that your simulator works for the various corner cases that exist.

Submissions which don't compile or have run-time errors will receive no points.

You should do most of your development on your own machine but you should log
into the lab machines we have allocated for our class in order to do final
testing.  We will be using these machines to grade your assignments so ensure
that it compiles and runs in that environment.

We no longer have access to the machines used in the previous lab but we are
currently working on getting access to additional machine that you can use.
For the time being simply do development on your own machine.

We will be providing a reference binary which you can use to compare with your
cache simulator.  If you find any bugs with the reference provided please
notify me immediately.

--------------------------
-- Turn-in Instructions --
--------------------------

DUE: May 26th, 2016 at 11:59:59 PM

Late projects are allowed for at most 3 days after the project due date.  For
each day late a 10% grade penalty is automatically attached (e.g. 3 days late =
30% penalty).  After 3 days, missing projects will receive a zero.  A project
is considered late at 12:00:01 AM (Which is 1 second past Midnight).

Make sure that you have included your Name, PID, and Email in cache.c
then you will run the packaging script 'package' to create a tarball of your
project.  The script will ask for your UCSD account name, this is your Active
Directory username which is the same as your UCSD email account name.  For
example, my UCSD email is "bmw014@eng.ucsd.edu" and my UCSD account name is
then "bmw014".  This is important because it will name your tarball according
to your account name.

Once your tarball has successfully been created you will need to email it to me
at bmw014@eng.ucsd.edu with the subject line: "cse240a Cache Project"
